{"version":3,"sources":["api/api.js","components/RecipesList.js","components/NewRecipes.js","components/EditRecipe.js","App.js","serviceWorker.js","index.js"],"names":["recipesList","id","data","name","ingredients","RecipesList","props","className","recipes","map","i","key","onClick","deleteRecipes","editRecipe","NewRecipes","initialState","useState","recipe","setRecipe","handleInputChange","event","currentTarget","value","onSubmit","preventDefault","add","type","placeholder","onChange","required","class","EditRecipe","currentRecipe","target","updateRecipe","setEdit","App","setRecipes","edit","setCurrentRecipe","useEffect","updatedRecipe","d","Date","monthA","split","getDate","getMonth","getFullYear","length","filter","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNA0CiBA,G,MA1CI,CAAC,CAClBC,GAAI,EACJC,KAAM,aACNC,KAAM,cACNC,YAAa,CACX,mCACA,uCACA,+BACA,2BACA,iCACA,aACA,6DAID,CACDH,GAAI,EACJC,KAAM,aACNC,KAAM,8BACNC,YAAa,CACX,gDACA,iFACA,gCACA,uCACA,6BACA,2DAED,CACDH,GAAI,EACJC,KAAM,aACNC,KAAM,2BACNC,YAAa,CACX,4CACA,4CACA,2BACA,sDACA,yCACA,4DCdSC,EArBI,SAACC,GAChB,OACE,yBAAKC,UAAU,WACVD,EAAME,QAAQC,KAAI,SAACC,GAAD,OACjB,oCACA,yBAAKH,UAAU,aAAaI,IAAKD,EAAET,IACjC,uBAAIM,UAAU,QAAQG,EAAEP,MACxB,2BAAIO,EAAER,MACN,2BAAIQ,EAAEN,aACN,4BAAQG,UAAU,gBAAgBK,QAAS,kBAAIN,EAAMO,cAAcH,EAAET,MACnE,uBAAGM,UAAU,0BAEf,4BAAQA,UAAU,kBAAkBK,QAAS,kBAAIN,EAAMQ,WAAWJ,KAClE,uBAAGH,UAAU,kC,cCiCZQ,EA/CI,SAACT,GAClB,IAAMU,EAAe,CAACf,GAAI,KAAME,KAAM,GAAGC,YAAY,IADzB,EAEAa,mBAASD,GAFT,mBAErBE,EAFqB,KAEbC,EAFa,KAItBC,EAAkB,SAACC,GAAW,IAAD,EACXA,EAAMC,cAArBnB,EAD0B,EAC1BA,KAAMoB,EADoB,EACpBA,MACbJ,EAAU,eAAID,EAAL,eAAaf,EAAMoB,MAW5B,OACE,0BAAMhB,UAAU,QAAQiB,SATT,SAACH,GAClBA,EAAMI,iBACFP,EAAOf,MAASe,EAAOd,cAE3BE,EAAMoB,IAAIR,GACVC,EAAUH,MAKN,yBAAKT,UAAU,YACb,2BACEoB,KAAK,OACLJ,MAAOL,EAAOf,KACdA,KAAK,OACLyB,YAAY,2BACZC,SAAYT,EACZU,UAAQ,KAGZ,yBAAKvB,UAAU,YACb,2BACEoB,KAAK,OACLJ,MAAOL,EAAOd,YACdD,KAAK,cACLyB,YAAY,kBACZC,SAAUT,EACVU,UAAQ,KAGZ,4BAAQvB,UAAU,kBAChBoB,KAAK,UACL,uBAAGI,MAAM,cAFX,SCFOC,EApCI,SAAC1B,GAAW,IAAD,EACAW,mBAASX,EAAM2B,eADf,mBACrBf,EADqB,KACbC,EADa,KAEtBC,EAAkB,SAACC,GAAS,IAAD,EACVA,EAAMa,OAApB/B,EADwB,EACxBA,KAAKoB,EADmB,EACnBA,MACZJ,EAAU,eAAID,EAAL,eAAaf,EAAOoB,MAS/B,OACE,0BAAMhB,UAAU,QAAQiB,SAPR,SAACH,GACjBA,EAAMI,iBACFP,EAAOf,MAAOe,EAAOd,aACzBE,EAAM6B,aAAajB,EAAOjB,GAAGiB,KAK3B,yBAAKX,UAAU,YACf,2BACEoB,KAAK,OACLxB,KAAK,OACLoB,MAAOL,EAAOf,KACd0B,SAAUT,IAEZ,2BACEO,KAAK,OACLxB,KAAK,cACLoB,MAAOL,EAAOd,YACdyB,SAAUT,IAEZ,4BAASb,UAAU,mBAAnB,QACA,4BAAQK,QAAS,kBAAMN,EAAM8B,SAAQ,IACnC7B,UAAU,iBADZ,cC+BS8B,MAxDf,WAAgB,IAAD,EACiBpB,mBAAS,IAD1B,mBACNT,EADM,KACG8B,EADH,OAEWrB,oBAAS,GAFpB,mBAENsB,EAFM,KAEAH,EAFA,OAI6BnB,mBADrB,CAAChB,GAAG,KAAME,KAAK,GAAGC,YAAY,KAHtC,mBAIN6B,EAJM,KAISO,EAJT,KAgCb,OA3BAC,qBAAU,WACRH,EAAWtC,KACV,IA0BD,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,SAAd,YAA+B,uBAAGA,UAAU,uBAE9C,yBAAKA,UAAU,WACXgC,EACE,6BACE,wBAAIhC,UAAW,QAAf,eACA,kBAAC,EAAD,CACEgC,KAAMA,EACNH,QAASA,EACTH,cAAeA,EACfE,aAvBO,SAAClC,EAAIyC,GACxBN,GAAQ,GACRE,EAAW9B,EAAQC,KAAI,SAAAS,GAAM,OAAKA,EAAOjB,KAAOA,EAAKyC,EAAgBxB,UAwB1D,kBAAC,EAAD,CAAYQ,IAnCf,SAACR,GACT,IAAIyB,EAAI,IAAIC,KACRC,EAAS,sCAAsCC,MAAM,KACzD5B,EAAOhB,KAAMyC,EAAEI,UAAW,IAAMF,EAAOF,EAAEK,YAAY,IAAKL,EAAEM,cAC5D/B,EAAOjB,GAAKO,EAAQ0C,OAAS,EAC7BZ,EAAW,GAAD,mBAAK9B,GAAL,CAAaU,SAgCtB,kBAAC,EAAD,CAAaV,QAASA,EACrBK,cAzCgB,SAACZ,GACnBqC,EAAW9B,EAAQ2C,QAAO,SAAAC,GAAI,OAAEA,EAAKnD,KAAKA,OAyCxCa,WAzBe,SAAAI,GACjBkB,GAAQ,GACRI,EAAiB,CAAEvC,GAAIiB,EAAOjB,GAAIE,KAAMe,EAAOf,KAAMC,YAAac,EAAOd,mBCvBzDiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a2d7ebe3.chunk.js","sourcesContent":["const recipesList  = [{\r\n    id: 1,\r\n    data: \"23/02/2020\",\r\n    name: 'Red Lasagna',\r\n    ingredients: [\r\n      \"28 ounce can of crushed tomatoes\",\r\n      \"2 tablespoons extra virgin olive oil\",\r\n      \"1/2 teaspoon fine grain salt\",\r\n      \"2 cloves garlic, chopped\",\r\n      \"1/2 teaspoon red pepper flakes\",\r\n      \"lemon zest\",\r\n      \"12 ounces fresh pasta sheets, cut into lasagna strips OR\",\r\n      \r\n    ],\r\n  \r\n  }, {\r\n    id: 2,\r\n    data: \"14/02/2020\",\r\n    name: 'Fruit Salad with Thai Herbs',\r\n    ingredients: [\r\n      \"3 tablespoons fresh lemon and / or lime juice\",\r\n      \"2 tablespoons honeya pinch of saltthe tender interior of a stalk of lemongrass\",\r\n      \"minced 1 / 2 teaspoon vanilla\",\r\n      \"5 - 6 cups of seasonal fruit, sliced\",\r\n      \"20 mint leaves, chiffonade\",\r\n      \"to serve: any or all of the following, toasted coconut\",\r\n    ],\r\n  }, {\r\n    id: 3,\r\n    data: \"11/01/2020\",\r\n    name: 'Easy Little Bread Recipe',\r\n    ingredients: [\r\n      \"1 1/4 cups / 300 ml warm water (105-115F)\",\r\n      \"2 teaspoons active dry yeast (one packet)\",\r\n      \"1 tablespoon runny honey\",\r\n      \"1 cup / 4.5 oz / 125 g unbleached all-purpose flour\",\r\n      \"1 cup / 5 oz / 140 g whole wheat flour\",\r\n      \"1 cup / 3.5 oz / 100 g rolled oats (not instant oats)\",\r\n    ],\r\n  \r\n  }];\r\n\r\n  export default recipesList","import React from \"react\";\r\n\r\nconst RecipesList =(props)=>{\r\n    return (\r\n      <div className=\"recipes\">\r\n          {props.recipes.map((i) => (\r\n            <>\r\n            <div className=\"oneRecipes\" key={i.id}>\r\n              <p  className=\"name\">{i.name}</p>\r\n              <p>{i.data}</p>\r\n              <p>{i.ingredients}</p>\r\n              <button className=\"ui red button\" onClick={()=>props.deleteRecipes(i.id)}>\r\n                <i className=\"trash alternate icon\"></i>\r\n              </button>\r\n              <button className=\"ui green button\" onClick={()=>props.editRecipe(i)}>\r\n              <i className=\"pencil alternate icon\"></i>\r\n              </button>\r\n              </div>\r\n            </>\r\n          ))}\r\n         </div> \r\n    )\r\n}\r\nexport default RecipesList","import React, { useState } from \"react\";\r\nconst NewRecipes = (props) => {\r\n  const initialState = {id: null, name: '',ingredients:''}\r\n  const [recipe, setRecipe] = useState(initialState)\r\n  \r\n  const handleInputChange=(event) => {\r\n    const {name, value} = event.currentTarget\r\n    setRecipe({...recipe,[name]:value})\r\n  }\r\n\r\n  const formSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(!recipe.name || !recipe.ingredients)\r\n    return\r\n    props.add(recipe)\r\n    setRecipe(initialState)\r\n  }\r\n\r\n    return (\r\n      <form className=\" form\" onSubmit={formSubmit}>\r\n        <div className=\"ui input\">\r\n          <input\r\n            type=\"text\"\r\n            value={recipe.name}\r\n            name=\"name\"\r\n            placeholder=\"The name of your dish...\"\r\n            onChange = {handleInputChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"ui input\">\r\n          <input\r\n            type=\"text\"\r\n            value={recipe.ingredients}\r\n            name=\"ingredients\"\r\n            placeholder=\"Descriptions...\"\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </div>\r\n        <button className=\"ui green button\"\r\n          type=\"submit\">\r\n          <i class=\"plus icon\"></i>\r\n          Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default NewRecipes;","import React, {useState} from 'react'\r\n\r\nconst EditRecipe = (props) => {\r\n  const [recipe, setRecipe] = useState(props.currentRecipe)\r\n  const handleInputChange=(event)=>{\r\n    const {name,value} = event.target\r\n    setRecipe({...recipe,[name]: value})\r\n  }\r\n\r\n  const formSubmit =(event)=>{\r\n    event.preventDefault()\r\n    if(!recipe.name||!recipe.ingredients) return\r\n    props.updateRecipe(recipe.id,recipe)\r\n  }\r\n\r\n  return (\r\n    <form className=\" form\" onSubmit={formSubmit}>\r\n      <div className=\"ui input\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={recipe.name}\r\n        onChange={handleInputChange}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"ingredients\"\r\n        value={recipe.ingredients}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button  className=\"ui green button\">Save</button>\r\n      <button onClick={() => props.setEdit(false)}\r\n        className=\"ui red button\"> Cancel</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditRecipe","import React,  { useState, useEffect } from 'react';\nimport './App.css';\nimport recipesList from './api/api'\nimport RecipesList from './components/RecipesList'\nimport NewRecipes from './components/NewRecipes'\nimport EditRecipe from './components/EditRecipe'\nfunction App() {\n  const [recipes, setRecipes] = useState([])\n  const [edit, setEdit] = useState(false)\n  const initialState = {id:null, name:'',ingredients:''}\n  const [currentRecipe, setCurrentRecipe] = useState(initialState)\n  useEffect(() => {\n    setRecipes(recipesList);\n  }, []);\n\n \n  const deleteRecipes=(id)=> {\n    setRecipes(recipes.filter(item=>item.id!==id))\n  }\n  const add=(recipe) =>{\n    let d = new Date();\n    let monthA = '01,02,03,04,05,06,07,08,09,10,11,12'.split(',');\n    recipe.data= d.getDate() +'/' + monthA[d.getMonth()]+'/'+ d.getFullYear()\n    recipe.id = recipes.length + 1\n    setRecipes([...recipes,recipe])\n  }\n\n\n  const updateRecipe = (id, updatedRecipe) => {\n    setEdit(false)\n    setRecipes(recipes.map(recipe => (recipe.id === id ? updatedRecipe : recipe)))\n  }\n\n  const editRecipe = recipe => {\n    setEdit(true)\n    setCurrentRecipe({ id: recipe.id, name: recipe.name, ingredients: recipe.ingredients })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\">Cookbook <i className=\"fas fa-book-open\"></i></h1>\n      </header>\n      <div className=\"content\">\n         {edit ? (\n            <div>\n              <h2 className =\"edit\">Edit Recipe</h2>\n              <EditRecipe\n                edit={edit}\n                setEdit={setEdit}\n                currentRecipe={currentRecipe}\n                updateRecipe={updateRecipe}\n              />\n            </div>\n          ) : (<NewRecipes add={add}/>)}\n      </div>\n     <RecipesList recipes={recipes}\n      deleteRecipes={deleteRecipes} \n      editRecipe={editRecipe}/>\n    </div>\n  );\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n/*<td><i class=\"trash alternate icon\"></i></td>\n         <td><i class=\"edit outline icon\"></i></td>*/"],"sourceRoot":""}